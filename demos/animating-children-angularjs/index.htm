<!doctype html>
<html ng-app="Demo">
<head>
	<meta charset="utf-8" />

	<title>
		Animating Child Nodes Using ngAnimate In AngularJS
	</title>

	<link rel="stylesheet" type="text/css" href="./demo.css"></link>
</head>
<body ng-controller="AppController">

	<h1>
		Animating Child Nodes Using ngAnimate In AngularJS
	</h1>

	<p>
		<a ng-click="toggleContainer()">Show Container</a>
	</p>

	<!--
		NOTE: The "container" element is the one that AngularJS is checking for animation
		settings; however, it is NOT the element that we are "truly" animating. Rather,
		we are conditionally animating the child / descendant / nested nodes based on the
		state of the container.
	-->
	<div ng-if="isShowingContainer" class="container">

		<div class="backdrop"></div>

		<a ng-click="toggleContainer()" class="hide">Hide Container</a>

		<div class="box box1">One</div>
		<div class="box box2">Two</div>
		<div class="box box3">Three</div>
		<div class="box box4">Four</div>

	</div>


	<!-- Load scripts. -->
	<script type="text/javascript" src="../../vendor/angularjs/angular-1.4.3.min.js"></script>
	<script type="text/javascript" src="../../vendor/angularjs/angular-animate-1.4.3.min.js"></script>
	<script type="text/javascript">

		// Create an application module for our demo.
		angular.module( "Demo", [ "ngAnimate" ] );


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I control the root of the application.
		angular.module( "Demo" ).controller(
			"AppController",
			function AppController( $scope ) {

				$scope.isShowingContainer = false;


				// ---
				// PUBLIC METHODS.
				// ---


				// If the container is visible, I hide it. If it is hidden, I show it.
				$scope.toggleContainer = function() {

					$scope.isShowingContainer = ! $scope.isShowingContainer;

				};

			}
		);

	</script>

</body>
</html>