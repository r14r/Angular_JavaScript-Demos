<!doctype html>
<html ng-app="Demo">
<head>
	<meta charset="utf-8" />

	<title>
		Handling Top-Level Errors In A Promise Workflow In AngularJS
	</title>
</head>
<body ng-controller="AppController">

	<h1>
		Handling Top-Level Errors In A Promise Workflow In AngularJS
	</h1>

	<p>
		The naked version.
	</p>

	<!-- Load scripts. -->
	<script type="text/javascript" src="../../vendor/angularjs/angular-1.3.8.min.js"></script>
	<script type="text/javascript">

		// Create an application module for our demo.
		var app = angular.module( "Demo", [] );


		// -------------------------------------------------- //
		// -------------------------------------------------- //


		// I control the root of the application.
		app.controller(
			"AppController",
			function( $q ) {

				// In this version, our top-level request for the promise is naked and
				// exposed. While it does return a promise in its happy-path, it raises
				// an exception if invoked during some unexpected state.
				loadSomething()			
					.then(
						function handleResolve( value ) {

							console.log( "Resolved!" );
							console.log( value );

						},
						function handleReject( error ) {

							console.log( "Rejected!" );
							console.log( error );

						}						
					)
				;


				// ---
				// PRIVATE METHODS.
				// ---


				// I load some data and return a promise.
				function loadSomething() {

					// If the state of the service is such that now is not a good time to
					// actually invoke the service, raises exception.
					if ( this.someStateFlag !== 1 ) {

						throw( new Error( "InvalidState" ) );
						
					}

					return( $q.when( "someValue" ) );

				}
				
			}
		);

	</script>

</body>
</html>
