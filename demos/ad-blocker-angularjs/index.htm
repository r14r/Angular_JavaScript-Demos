<!doctype html>
<html ng-app="Demo" ng-controller="AppController">
<head>
	<meta charset="utf-8" />

	<title>
		TypeError: Cannot Read Property "childNodes" Of Undefined In AngularJS
	</title>
</head>
<body>

	<h1>
		TypeError: Cannot Read Property "childNodes" Of Undefined In AngularJS
	</h1>

	<div>

		<!-- 
			In order for this to demo to break, we need to have a few things in play:

			1. We need the AppController to be on the HTML element.
			
			2. We need the AppController to trigger the loading of a 3rd-party script
			that gets injected into document.

			3. We need the body to have a directive (it doesn't matter which one) that 
			is nested inside another element (ie, it cannot be a direct child of the 
			body tag).

			4. We need the user to have some sort of Chrome plugin like "CookieOK" or
			"Google Analytics Opt-out Add-on" that injects a Script into the page.
		-->
		<div ng-style="{}">
			Woot, there it is.
		</div>

	</div>


	<!-- Load scripts. -->
	<script type="text/javascript" src="./angular-1.4.3.js"></script>
	<script type="text/javascript">

		// Create an application module for our demo.
		var app = angular.module( "Demo", [] );


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I control the root of the application.
		angular.module( "Demo" ).controller(
			"AppController",
			function( $scope, thirdPartyScript ) {

				// Trigger the loading of a script, which will be injected into the DOM.
				thirdPartyScript.load();

			}
		);


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I provide the ability to load and then interact with a 3rd-party script.
		angular.module( "Demo" ).factory(
			"thirdPartyScript",
			function() {

				// Return the public API.
				return({
					load: load
				});


				// ---
				// PUBLIC METHODS.
				// ---


				// I load the 3rd-party script tag.
				function load() {
					
					// Inject script before first script in page.
					// --
					// NOTE: Code like this is often copy-pasted out of some read-me
					// on the 3rd-party vendor documentation.

					var script = document.createElement( "script" );
					script.src = "//cdn.some-3rd-party-vendor.com/js/script.js";

					var firstScript = document.getElementsByTagName( "script" )[ 0 ];

					firstScript
						.parentNode
							.insertBefore( script, firstScript )
					;

				}

			}
		);

	</script>

</body>
</html>
