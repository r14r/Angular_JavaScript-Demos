<!doctype html>
<html ng-app="Demo">
<head>
	<meta charset="utf-8" />

	<title>
		ngRoute Exposes The Original Route Definition Through Prototypal Inheritance In AngularJS
	</title>
</head>
<body ng-controller="AppController">

	<h1>
		ngRoute Exposes The Original Route Definition Through Prototypal Inheritance In AngularJS
	</h1>

	<p>
		<a href="#/a">Route A</a>
		&mdash;
		<a href="#/b">Route B</a>
	</p>

	<p>
		<strong>Action</strong>: {{ routeAction || 'Noop' }}
	</p>


	<!-- Load scripts. -->
	<script type="text/javascript" src="../../vendor/angularjs/angular-1.3.13.min.js"></script>
	<script type="text/javascript" src="../../vendor/angularjs/angular-route-1.3.13.min.js"></script>
	<script type="text/javascript">

		// Create an application module for our demo.
		var app = angular.module( "Demo", [ "ngRoute" ] );


		// -------------------------------------------------- //
		// -------------------------------------------------- //


		// I setup the routes for the application.
		app.config(
			function( $routeProvider ) {

				$routeProvider
					.when(
						"/a",
						{
							action: "Get your ass to mars!"
						}
					)
					.when(
						"/b",
						{
							// Route B doesn't have an "action" value.
						}
					)
				;

			}
		);


		// -------------------------------------------------- //
		// -------------------------------------------------- //


		// I control the root of the application.
		app.controller(
			"AppController",
			function( $scope, $route ) {

				$scope.routeAction = null;

				// I listen for route-change events. 
				$scope.$on(
					"$routeChangeSuccess",
					function handleRouteChangeEvent( event ) {

						var current = $route.current;

						console.info( "Looking at \"%s\"", current.originalPath );

						// Let's examine how the action variable is exposed on the
						// current route - this is a value that we define in the original
						// route definition - it is not something that AngularJS is 
						// calculating on a per-route-change basis.
						console.log( "action[ in ]:", ( "action" in current ) );
						console.log( "action[ hasOwnProperty ]:", current.hasOwnProperty( "action" ) );

						// Let's look at how params is exposed. This value is calculated
						// by AngularJS, on route change, and contains an aggregate of the
						// route params and the location.search params.
						console.log( "params[ in ]:", ( "params" in current ) );
						console.log( "params[ hasOwnProperty ]:", current.hasOwnProperty( "params" ) );

						// Let's look at how pathParams is exposed. This value is 
						// calculated by AngularJS, on route change, and contains the 
						// variable mappings defined by the route path.
						console.log( "pathParams[ in ]:", ( "pathParams" in current ) );
						console.log( "pathParams[ hasOwnProperty ]:", current.hasOwnProperty( "pathParams" ) );
						
						// Store our current action for output.
						$scope.routeAction = current.action;
						
					}
				);

			}
		);

	</script>

</body>
</html>