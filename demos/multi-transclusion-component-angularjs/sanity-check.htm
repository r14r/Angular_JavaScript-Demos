<!doctype html>
<html ng-app="Demo">
<head>
	<meta charset="utf-8" />

	<title>
		(SANITY CHECK) In AngularJS
	</title>

	<link rel="stylesheet" type="text/css" href="./demo.css"></link>
</head>
<body ng-controller="AppController as vm">

	<h1>
		(SANITY CHECK) In AngularJS {{ true }}
	</h1>

	<!-- 
		This Layout component creates an isolate scope, but transcludes the 
		contents of each one of the embedded "panels" so that the content of 
		each panel can access the outer scope of the context while the structure
		of the component can remain encapsulated within the isolate template.
	-->
	<layout size="vm.size">
		<layout-panel role="header">

			Layout Header {{ true }}

		</layout-panel>
		<layout-panel role="body">

			<!-- 
				These values will all be bound to the outer scope, NOT to the
				ISOLATE scope. 
			-->

			<p>
				Layout Body - Size: {{ vm.size }}
			</p>

			<p>
				<a ng-click="vm.toggleSize()">Toggle Size</a>
			</p>

			<p>
				Sanity Check: {{ vm.message }}
			</p>

		</layout-panel>
		<layout-panel role="footer">

			Layout Footer

		</layout-panel>
	</layout>


	<!-- Load scripts. -->
	<script type="text/javascript" src="../../vendor/jquery/jquery-2.1.0.min.js"></script>
	<script type="text/javascript" src="../../vendor/angularjs/angular-1.4.5.min.js"></script>
	<script type="text/javascript">

		// Create an application module for our demo.
		var app = angular.module( "Demo", [] );


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I control the root of the application.
		angular.module( "Demo" ).controller(
			"AppController",
			function AppController( $scope ) {

				var vm = this;

				// I hold the desired size of the layout. This is passed into the 
				// layout component as a isolate-bound attribute.
				vm.size = "small";

				// I hold a sanity-check value to make sure the isolate layout scope
				// and the main scope are not colliding.
				vm.message = "Hello world!";
				
				// Expose public methods.
				vm.toggleSize = toggleSize;


				// ---
				// PUBLIC METHODS.
				// ---


				// I toggle the currently-desired size of the layout component.
				function toggleSize() {

					vm.size = ( vm.size === "small" )
						? "large"
						: "small"
					;

				}

			}
		);


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I provide a layout with thee panels - header, footer, and body.
		// --
		// NOTE: This component directive is broken up into two different priorities.
		// We need to do this because we need to access the element content before the
		// "template" is applied, which is not currently possible in a single directive
		// (that I know of). As such, we have two passes:
		// --
		// The first pass defines the controller and inspects the element and gathers 
		// up the linking functions for the sub-content areas.
		// --
		// The second pass pulls in the template, replaces the element content 
		// (automatically) and performs the sub-content transclusion using the linking 
		// functions compiled in the first pass.
		angular.module( "Demo" ).directive(
			"layout",
			function layoutDirective( $compile ) {

				// Return the directive configuration.
				// --
				// NOTE: We are creating an isolate-scope along with a Controller.
				return({
					controller: LayoutController,
					controllerAs: "vm",
					link: link,
					priority: -1,
					restrict: "E",
					scope: {
						layoutSize: "=size"
					},
					transclude: true,
					template:
					`
						<div class="layout-inner" ng-class="{ large: ( props.layoutSize == 'large' ) }">
							<div class="layout-header">
								<!-- Transcuded. -->
							</div>
							<div class="layout-body">
								<!-- Transcuded. -->
							</div>
							<div class="layout-footer">
								<!-- Transcuded. -->
							</div>
						</div>
					`
				});


				function link( scope, element, attribute, controller, transclude ) {

					// -------------------------------------------------------------------- //
					// -------------------------------------------------------------------- //
					// CAUTION: This is just a sanity check to see if this works (it 
					// does not) when you transclude .contents() instead of just elements:
					// --
					// https://www.airpair.com/angularjs/posts/creating-container-components-part-2-angular-1-directives#making-it-reusable
					// -------------------------------------------------------------------- //
					// -------------------------------------------------------------------- //

					transclude(
						function attachClone( clone ) {

							element.find( "div.layout-header" )
								.append( clone.filter( "[ role = 'header' ]" ).contents() )
							;
							
							element.find( "div.layout-body" )
								.append( clone.filter( "[ role = 'body' ]" ).contents() )
							;

							element.find( "div.layout-footer" )
								.append( clone.filter( "[ role = 'footer' ]" ).contents() )
							;

						}
					);

				}


				// I control the Layout component directive.
				function LayoutController( $scope ) {

					var vm = this;

					// Create a ReactJS-inspired props object for bound attributes.
					var props = $scope.props = $scope;

					// As a sanity check, let's define a value that we know will also
					// be defined on the parent scope. This way, we can see if any
					// scope collision takes place.
					vm.message = "From isolate scope.";

				}

			}
		);

	</script>

</body>
</html>
