<!doctype html>
<html>
<head>
	<meta charset="utf-8" />

	<title>
		Rendering Large Datasets With ReactJS 0.14.7
	</title>

	<link rel="stylesheet" type="text/css" href="./demo.css"></link>
</head>
<body>
	
	<h1>
		Rendering Large Datasets With ReactJS 0.14.7
	</h1>

	<div id="content">
		<!-- This content will be replaced with the React rendering. -->
	</div>
	

	<!-- Load scripts. -->
	<script src="../../vendor/reactjs/0.14.7/react.min.js"></script>
	<!--
		CAUTION: Using the JSXTransformer for in-browser transpiling - this is deprecated
		and not recommended with 0.14.7. But, this should only affect the initial page 
		load, not the post-rendering performance (my assumption).
	-->
	<script src="../../vendor/reactjs/JSXTransformer-0.13.3.js"></script>
	<script type="text/jsx">
		

		// Demo has to extend Component since its a stateful component.
		Demo.prototype = Object.create( React.Component.prototype );

		// I manage the demo.
		function Demo( initialProps ) {

			// Call the super constructor.
			React.Component.call( this, initialProps );

			var vm = this;

			// I provide the initial view-model, before the component is mounted.
			vm.state = {
				grid: generateGrid( 1000, 10 ),
				form: {
					filter: ""
				}
			};

			// Expose the public methods.
			vm.render = render;
			vm.remountGrid = remountGrid;
			vm.setFilter = setFilter;
			vm.unmountGrid = unmountGrid;


			// ---
			// PUBLIC METHODS.
			// ---


			// I render the view using the current state and properties collections.
			function render() {

				// Calculate how many data-points are being rendered (ie, how many tables
				// cells we'll be filtering during the demo).
				if ( vm.state.grid.length ) {

					var dataPoints = ( vm.state.grid.length * vm.state.grid[ 0 ].items.length );

				} else {

					var dataPoints = 0;

				}

				// Determine how many items are being highlighted by the search.
				var visibleCount = getVisibleCount();

				return(
					<div>
						<DemoForm 
							dataPoints={ dataPoints }
							visibleCount={ visibleCount }
							filter={ vm.state.form.filter }
							onFilterChange={ setFilter }
							isMounted={ !! vm.state.grid.length }
							onUnmount={ unmountGrid }
							onRemount={ remountGrid }
							onReverse={ reverseGrid }>
						</DemoForm>

						<DemoTable
							grid={ vm.state.grid }
							filter={ vm.state.form.filter }>
						</DemoTable>
					</div>
				);

			}


			// I repopulate the grid with data. This will help separate processing 
			// performance characteristics from page-load processing.
			function remountGrid() {

				vm.setState({
					grid: generateGrid( 1000, 10 ),
					form: {
						filter: ""
					}
				});

			}


			// I reverse the grid, inverting each column and row.
			function reverseGrid() {

				// Create a new top-level grid reference.
				var newGrid = vm.state.grid.slice();
				
				// Reverse each row and column. We are doing it in-place do keep parity
				// with the Angular app; but, the reality is, we don't need to do this
				// since React will be using the key={} attributes to track DOM creation
				// and destruction.
				newGrid
					.reverse()
					.forEach(
						function iterator( row, i ) {

							row.items.reverse();

						}
					)
				;

				vm.setState({
					grid: newGrid
				});

			}


			// I update the state for filtering.
			function setFilter( newFilter ) {

				// When we update the filter, we don't have to mutate any other state
				// since the filtering is actually applied in the render() methods.
				vm.setState({
					form: {
						filter: newFilter
					}
				});

			}

			
			// I clear the grid of data. This will help separate processing performance
			// characteristics from page-load processing.
			function unmountGrid() {

				vm.setState({
					grid: [],
					form: {
						filter: ""
					}
				});

			}


			// ---
			// PRIVATE METHODS.
			// ---


			// I generate a grid of items with the given dimensions. The grid is 
			// represented as a two dimensional grid, of sorts. Each row has an object
			// that has an items collection.
			function generateGrid( rowCount, columnCount ) {

				var valuePoints = [ 
					"Daenerys", "Jon", "Sansa", "Arya", "Stannis", "Gregor", "Tyrion",
					"Theon", "Joffrey", "Ramsay", "Cersei", "Bran", "Margaery", 
					"Melisandre", "Daario", "Jamie", "Eddard", "Myrcella", "Robb", 
					"Jorah", "Petyr", "Tommen", "Sandor", "Oberyn", "Drogo", "Ygritte"
				];

				var valueIndex = 0;

				var grid = [];

				for ( var r = 0 ; r < rowCount ; r++ ) {

					var row = {
						id: r,
						items: []
					};

					for ( var c = 0 ; c < columnCount ; c++ ) {

						row.items.push({
							id: ( r + "-" + c ),
							value: valuePoints[ valueIndex ],
							isHiddenByFilter: false
						});

						if ( ++valueIndex >= valuePoints.length ) {

							valueIndex = 0;

						}

					}

					grid.push( row );

				}

				return( grid );

			}


			// I calculate and return the visible count of items based on the current 
			// state of the filtering.
			function getVisibleCount() {

				var count = 0;

				// We are pre-calculating the column count here because we are assuming
				// a uniform column distribution in the grid.
				var rowCount = vm.state.grid.length;
				var columnCount = ( vm.state.grid.length && vm.state.grid[ 0 ].items.length );

				for ( var r = 0 ; r < rowCount ; r++ ) {

					var row = vm.state.grid[ r ];

					for ( var c = 0 ; c < columnCount ; c++ ) {

						var item = row.items[ c ];

						var isHidden = ( vm.state.form.filter && ( item.value.indexOf( vm.state.form.filter ) === -1 ) );

						if ( ! isHidden ) {

							count++;

						}

					}

				}

				return( count );

			}

		}


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I manage the Form widget.
		// --
		// NOTE: We don't need to extend the Render.Component class since this is not
		// a stateful component - it's rendering is performed exclusively using the 
		// passed-in props.
		function DemoForm( initialProps ) {

			var vm = this;

			// Expose the public methods.
			vm.handleFilterChange = handleFilterChange;
			vm.handleRemount = handleRemount;
			vm.handleReverse = handleReverse;
			vm.handleUnmount = handleUnmount;
			vm.render = render;


			// ---
			// PUBLIC METHODS.
			// ---


			// I handle user-based changes on the input form. When the user updates the
			// filtering, we need to let the calling context know about it.
			function handleFilterChange( event ) {

				vm.props.onFilterChange( vm.refs.filter.value );

			}


			// I handle the user's desire to remount the data.
			function handleRemount( event ) {

				vm.props.onRemount();

			}


			// I handle the user's desire to reverse the data in the grid.
			function handleReverse( event ) {

				vm.props.onReverse();

			}


			// I handle the user's desire to unmount the data.
			function handleUnmount( event ) {

				vm.props.onUnmount();

			}


			// I render the view using the current state and properties collections.
			function render() {

				var fitlerInsight = null;

				// If the user has entered filter text, we want to show some insight into
				// the breadth of the filtering.
				// --
				// CAUTION: We have to have these awkward and explicit spaces { " " } 
				// because the JSX strips out certain pieces of whitespace, leaving
				// the input butted-up against the label.
				if ( vm.props.filter ) {

					fitlerInsight = (
						<span>
							&mdash;
							Filtering <strong>{ vm.props.filter }</strong> 
							{ " " } over { vm.props.dataPoints } data points,
							{ " " } { vm.props.visibleCount } found.
						</span>
					);

				}

				// Provide some tooling to unmount and remount the data.
				if ( vm.props.isMounted ) {

					var mountAction = <a onClick={ handleUnmount }>Unmount Grid</a>;
					var reverseAction = <a onClick={ handleReverse }>Reverse Grid</a>;

				} else {

					var mountAction = <a onClick={ handleRemount }>Remount Grid</a>;
					var reverseAction = null;

				}

				// CAUTION: We have to have these awkward and explicit spaces { " " } 
				// because the JSX strips out certain pieces of whitespace, leaving
				// the input butted-up against the label.
				return(
					<form>
						<strong>Filter Data</strong>:
						{ " " } 
						<input 
							type="text"
							ref="filter" 
							value={ vm.props.filter } 
							onChange={ handleFilterChange } 
							/>
						{ " " }
						{ fitlerInsight }
						{ " " }
						{ mountAction } 
						{ " " }
						{ reverseAction }
					</form>
				);

			}

		}


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I manage the Table widget.
		// --
		// NOTE: This component is just a render function. This uses the new stateless 
		// component syntax introduce in 0.14. This syntax does not provide an actual
		// component instance behind the scenes.
		var DemoTable = function render( props ) {

			// If the table is being filtered, we want to add a class to the table to
			// set a default style for all the non-hidden elements.
			var tableClasses = props.filter
				? "filtered"
				: null
			;

			// Creating a local reference so we don't have to .bind() the iterator.
			var filter = props.filter;

			// Translate the grid into a collection of rows.
			var rows = props.grid.map(
				function transformRow( row ) {

					return( 
						<DemoTableRow
							key={ row.id }
							row={ row }
							filter={ filter }>
						</DemoTableRow>
					);

				}
			);

			return(
				<table width="100%" cellSpacing="2" className={ tableClasses }>
					<tbody>
						{ rows }
					</tbody>
				</table>
			);

		};


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I manage the Table rows.
		// --
		// NOTE: This component is just a render function. This uses the new stateless 
		// component syntax introduce in 0.14. This syntax does not provide an actual
		// component instance behind the scenes.
		var DemoTableRow = function render( props ) {

			var columns = [
				<td>
					{ props.row.id }
				</td>
			];

			// Creating a local reference so we don't have to .bind() the iterator.
			var filter = props.filter;

			// Translate each item into a TD element. If there is filtering being 
			// applied, some of the TD elements will have the "hidden" class.
			props.row.items.forEach(
				function transformItem( item ) {

					var classes = "item";

					if ( filter && ( item.value.indexOf( filter ) === -1 ) ) {

						classes += " hidden";

					}

					columns.push(
						<td key={ item.id } className={ classes }>
							{ item.value }
						</td>
					);

				}
			);

			return(
				<tr>
					{ columns }
				</tr>
			);

		};


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// Render the root Demo and mount it inside the given element.
		React.render( <Demo />, document.getElementById( "content" ) );

	</script>

</body>
</html>