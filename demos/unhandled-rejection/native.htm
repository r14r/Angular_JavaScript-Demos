<!doctype html>
<html>
<head>
	<meta charset="utf-8" />

	<title>
		Logging And Debugging Unhandled Promise Rejections In The Browser
	</title>
</head>
<body>

	<h1>
		Logging And Debugging Unhandled Promise Rejections In The Browser
	</h1>

	<h2>
		Native / Shim Promise Implementation Only
	</h2>

	<p>
		<em>Look at console &mdash; things being logged, yo!</em>
	</p>

	<script type="text/javascript" src="../../vendor/core-js/2.4.1/shim.min.js"></script>
	<script type="text/javascript">

		// Listen for unhandled Promise rejections.
		// --
		// NOTE: At the time of this writing, only Chrome has native support for this 
		// global event. Other browser may or may not log the root Error to the console,
		// but the behavior differs depending on the Promise implementation (ie, native
		// vs. shim).
		window.addEventListener(
			"unhandledrejection",
			function handleRejection( event ) {

				// Prevent the default behavior, which is logging the unhandled rejection
				// error to the console.
				// --
				// NOTE: This is only meaningful in Chrome that supports this event.
				event.preventDefault();

				console.group( "UNHANDLED PROMISE REJECTION" );
				console.log( event.reason );
				console.log( event.promise );
				console.groupEnd();

			}
		);


		// Now that we have our global event-handler in place, let's create a Promise
		// chain that results in a Rejection for which we provide no .catch() handler.
		var promise = Promise
			.resolve( "Come at me, bro!" )
			.then(
				function() {

					throw( new Error( "Something went wrong!" ) );

				}
			)
		;		

	</script>

</body>
</html>
