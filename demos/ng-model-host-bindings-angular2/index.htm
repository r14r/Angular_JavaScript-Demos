<!doctype html>
<html>
<head>
	<meta charset="utf-8" />

	<title>
		Host Bindings Are Breaking The ngModel Bridge In Angular 2 Beta 11
	</title>

	<link rel="stylesheet" type="text/css" href="./demo.css"></link>
</head>
<body>

	<h1>
		Host Bindings Are Breaking The ngModel Bridge In Angular 2 Beta 11
	</h1>

	<my-app>
		Loading...
	</my-app>

	<!-- Load demo scripts. -->
	<script type="text/javascript" src="../../vendor/angularjs-2-beta/11/es6-shim.min.js"></script>
	<script type="text/javascript" src="../../vendor/angularjs-2-beta/11/Rx.umd.min.js"></script>
	<script type="text/javascript" src="../../vendor/angularjs-2-beta/11/angular2-polyfills.min.js"></script>
	<script type="text/javascript" src="../../vendor/angularjs-2-beta/11/angular2-all.umd.js"></script>
	<!-- AlmondJS - minimal implementation of RequireJS. -->
	<script type="text/javascript" src="../../vendor/angularjs-2-beta/11/almond.js"></script>
	<script type="text/javascript">

		// Defer bootstrapping until all of the components have been declared.
		requirejs( 
			[ /* Using require() for better readability. */ ],
			function run() {

				ng.platform.browser.bootstrap( require( "App" ) );

			}
		);


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I provide the root application component.
		define(
			"App",
			function registerApp() {

				// Configure the App component definition.
				ng.core
					.Component({
						selector: "my-app",
						directives: [ require( "TOGGLE_DIRECTIVES" ) ],
						template:
						`
							<toggle [(ngModel)]="toggleIsOn"></toggle>

							<p>
								Toggle value: {{ ( toggleIsOn ? "Yes" : "No" ) }}
							</p>
						`
					})
					.Class({
						constructor: AppController
					})
				;

				return( AppController );


				// I control the App component.
				function AppController() {

					var vm = this;

					// I determine whether or not the toggle is currently on.
					// --
					// NOTE: We need this start as TRUE so that when the Toggle 
					// component is mounted, it's internal value starts as "undefined" 
					// (which is a falsey) and then moves to "true" (which is obviously 
					// a truthy). That will cause the Toggle's host bindings to poop
					// the bed.
					vm.toggleIsOn = true;

				}

			}
		);


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I provide all of the directives need to work the Toggle, including the 
		// ngModel variations.
		define(
			"TOGGLE_DIRECTIVES",
			function registerToggleDirectives() {

				return([
					require( "Toggle" ),
					require( "ToggleForNgModel" )
				]);

			}
		);


		// I provide a Yes / No toggle component.
		// --
		// NOTE: Notice that the core Toggle component DOESN'T KNOW ANYTHING ABOUT 
		// NGMODEL or the concept of "value accessors." That's a good thing - it goes
		// beyond the scope of responsibility for this component.
		define(
			"Toggle",
			function registerToggle() {

				// Configure the Toggle component definition.
				ng.core
					.Component({
						selector: "toggle",
						inputs: [ "value" ],
						outputs: [ "valueChange" ],
						host: {
							"(click)": "handleClick()"

							// If you omit these host bindings, then everything here 
							// works as one would expect. However, if you include these
							// host bindings AND the value input's first value is a 
							// truthy, Angular 2 will throw the:
							// --
							// ExpressionChangedAfterItHasBeenCheckedException
							// --
							// ... error. To see that in action, uncomment the following
							// host bindings. You only need one of these bindings to 
							// trigger the error.
							// --
							// , "[class.toggled-on]": "value"
							// , "[class.toggled-off]": "! value"
						},
						template:
						`
							{{ ( value ? "Yes" : "No" ) }}
						`
					})
					.Class({
						constructor: ToggleController
					})
				;

				return( ToggleController );


				// I control the Toggle component. 
				function ToggleController() {

					var vm = this;

					// I am the event stream for the valueChange output.
					vm.valueChange = new ng.core.EventEmitter();

					// Expose the public methods.
					vm.handleClick = handleClick;


					// ---
					// PUBLIC METHODS.
					// ---


					// I handle the internal click event on the component. 
					function handleClick() {

						// When the user clicks on the toggle, we can't change the value
						// directly - that would mess up the one-way data flow. Instead,
						// we have to emit the value change event and let the calling
						// context decide if it wants to respond by updating the inputs.
						vm.valueChange.next( ! vm.value );

					}

				}

			}
		);


		// I provide an ngModel-enabled bridge for the Toggle component.
		define(
			"ToggleForNgModel",
			function registerToggleForNgModel() {

				// Configure the ToggleForNgModel directive definition.
				ng.core
					.Directive({
						// Notice that we are only matching on instances of the Toggle
						// component that also include the ngModel directive.
						selector: "toggle[ngModel]",
						host: {
							"(valueChange)": "handleValueChange( $event )"
						},

						// When ngModel is being used, we need to create a bridge between
						// the ngModel directive and the target component. That bridge 
						// has to implement the "value accessor" interface. In this case,
						// we're telling Angular to use THIS DIRECTIVE INSTANCE as that 
						// value accessor provider. This means that the following 
						// controller needs to provide the value accessor methods:
						// --
						// * registerOnChange
						// * registerOnTouched
						// * writeValue
						// --
						// NOTE: You don't need the forwardRef() here because we are 
						// using ES5 instead of TypeScript. Woot!
						providers: [
							ng.core.provide(
								ng.common.NG_VALUE_ACCESSOR,
								{
									useExisting: ToggleForNgModelController,
									multi: true
								}
							)
						]
					})
					.Class({
						constructor: ToggleForNgModelController
					})
				;

				ToggleForNgModelController.parameters = [
					new ng.core.Inject( require( "Toggle" ) )
				];

				return( ToggleForNgModelController );


				// I control the ToggleForNgModel directive.
				// --
				// NOTE: Since this controller is performing double-duty as both the 
				// directive controller AND the valueAccessor (for ngModel), it is also
				// implementing the value accessor interface.
				function ToggleForNgModelController( toggle ) {

					var vm = this;

					// Eventually, ngModel will register its own change hander. Until
					// then, let's start with a no-op to keep the consumption uniform
					// in the following code.
					var onChange = function noop() {};

					// Expose the public methods.
					vm.handleValueChange = handleValueChange;
					vm.registerOnChange = registerOnChange; // Value accessor interface.
					vm.registerOnTouched = registerOnTouched; // Value accessor interface.
					vm.writeValue = writeValue; // Value accessor interface.


					// ---
					// PUBLIC METHODS.
					// ---


					// I handle the valueChange event coming out of the Toggle component.
					// Since ngModel doesn't know about this event, we have to bridge the
					// gap between the Toggle component and the ngModel directive.
					function handleValueChange( newValue ) {

						// When we invoke the onChange() value accessor method, ngModel
						// already assumes that the DOM (Document Object Model) is in the
						// correct state. As such, we have ensure that the Toggle 
						// component reflects the change that it just emitted.
						// --
						// NOTE: At this point, we are disregarding the one-way data flow
						// paradigm. But, that's the WHOLE POINT OF NG-MODEL.
						toggle.value = newValue;

						// Tell ngModel so that it can synchronize its own internal model.
						onChange( newValue );

					}


					// I register the onChange handler provided by ngModel.
					function registerOnChange( newOnChange ) {

						onChange = newOnChange;

					}
					

					// I register the onTouched handler provided by ngModel.
					function registerOnTouched() {
						
						// console.log( "registerOnTouched" );

					}
					

					// I implement the value input invoked by ngModel. When ngModel 
					// wants to update the value of the target component, it doesn't 
					// know what property to use (or how to transform that value to 
					// something meaningful for the target component). As such, we have 
					// to bridge the gap between ngModel and the input property of the 
					// Toggle component.
					function writeValue( newValue ) {

						// -- GROSS CODE SMELL. SOMETHING HERE IS TERRIBLY WRONG. ---- //
						// -- GROSS CODE SMELL. SOMETHING HERE IS TERRIBLY WRONG. ---- //
						// --
						// If the Toggle component has [host] bindings that depend on the
						// value input, then you need to add this setTimeout(). However,
						// if the Toggle component does NOT USE [host] bindings, then you
						// can safely omit this setTimeout() ... even if the Toggle view
						// depends on the value input. THIS HAS GOT TO BE A BUG.
						// --
						//setTimeout(
						//	function avoidExpressionChangedAfterItHasBeenCheckedException() {

								toggle.value = !! newValue; // Cast to boolean.

						//	}
						//);
						// -- GROSS CODE SMELL. SOMETHING HERE IS TERRIBLY WRONG. ---- //
						// -- GROSS CODE SMELL. SOMETHING HERE IS TERRIBLY WRONG. ---- //

						// CAUTION: Setting the value in this way will not trigger the
						// ngOnChanges() life-cycle method on the Toggle component.
						
					}

				}

			}
		);

	</script>

</body>
</html>