<!doctype html>
<html ng-app="Demo">
<head>
	<meta charset="utf-8" />

	<title>
		Handling Plupload Init Race Condition In AngularJS
	</title>

	<link rel="stylesheet" type="text/css" href="./demo.css"></link>
</head>
<body ng-controller="AppController">

	<h1>
		Handling Plupload Init Race Condition In AngularJS
	</h1>

	<p>
		<a ng-click="toggleUploader()">Show uploader</a>
	</p>

	<div 
		ng-if="isShowingUploader" 
		bn-uploader
		id="uploader-container">

		<span id="uploader-button">Browse Files</span>

	</div>
	

	<!-- Load scripts. -->
	<script type="text/javascript" src="../../vendor/angularjs/angular-1.4.3.min.js"></script>
	<script type="text/javascript" src="./moxie.patched.js"></script>
	<script type="text/javascript" src="./plupload.dev.patched.js"></script>
	<script type="text/javascript">

		// Create an application module for our demo.
		var app = angular.module( "Demo", [] );


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I control the root of the application.
		angular.module( "Demo" ).controller(
			"AppController",
			function AppController( $scope, $location ) {

				// I determine if the uploader is being shown.
				$scope.isShowingUploader = false;

				// I listen to the URL changes since we are going to let the state of 
				// the URL control whether or not the uploader is visible.
				$scope.$on( "$locationChangeSuccess", handleLocationChange );


				// ---
				// PUBLIC METHODS.
				// ---


				// I toggle the uploader open or close.
				// --
				// NOTE: This works by adjusting the state of the URL which will, in 
				// turn, trigger our URL handler and update our local view-model.
				$scope.toggleUploader = function() {

					var newValue = ( $location.search().uploader === "true" )
						? null 
						: "true"
					;

					$location.search( "uploader", newValue );

				};


				// ---
				// PRIVATE METHODS.
				// ---


				// When the URL changes, I update the local view-model to reflect the
				// desired uploader state.
				function handleLocationChange() {

					$scope.isShowingUploader = ( $location.search().uploader === "true" );

				}

			}
		);


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I control the uploader.
		angular.module( "Demo" ).controller(
			"UploadController",
			function UploadController( $scope, $location ) {

				// For the sake of the demo, let's immediately redirect back into a 
				// state in which the uploader should be closed. This will demonstrate
				// the race condition between the uploader initialization and the view
				// rendering and linking.
				$location.search( "uploader", null );

			}
		);


		// I manage the UI portion of the uploader.
		angular.module( "Demo" ).directive(
			"bnUploader",
			function bnUploaderDirective( $timeout ) {

				// Return the directive configuration object.
				return({
					controller: "UploadController",
					link: link,
					restrict: "A"
				});


				// I bind the JavaScript events to the view-model.
				function link( scope, element, attributes ) {

					console.log( ".... Uploader directive linked." );

					// Let's log the next tick so we can when things happen in the console.
					setTimeout(
						function() {

							console.log( ">>>> Tick <<<<" );

						}
					);


					// Create our Plupload uploader instance.
					var uploader = new plupload.Uploader({
						runtimes: "html5",
						browse_button : 'uploader-button',
						container: "uploader-container",
						drop_element: "uploader-container",
						url : "./this-isnt-relevant-to-the-demo/"
					});

					// Due to a race condition in the Plupload initialization, we want to
					// defer the actual call to .init(). This way, if the current scope is
					// quickly destroyed, we won't leave a whole lot of junk in memory.
					var initTimer = $timeout(
						function initUploader() {

							uploader.init();

						},
						0,
						false // No need to trigger a digest.
					);

					// Since we are allocating some heavy objects, we need to make sure
					// that we cleanup after ourselves. When the scope is destroyed, we
					// need to teardown all of Plupload stuff.
					scope.$on( "$destroy", handleDestroy );


					// I handle the destroy event, performing cleanup.
					function handleDestroy() {

						console.warn( ".... Destroying uploader." );

						// If the Plupload uploader had not yet been initialized, stop
						// the timer to make sure it doesn't try to.
						$timeout.cancel( initTimer );

						// We can safely call this even if the uploader was never 
						// initialized.
						uploader.destroy();

					}

				}

			}
		);

	</script>

</body>
</html>
