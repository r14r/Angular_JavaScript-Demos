<!doctype html>
<html ng-app="Demo">
<head>
	<meta charset="utf-8" />

	<title>
		Creating jqLite Plugins In AngularJS
	</title>

	<link rel="stylesheet" type="text/css" href="./demo.css"></link>
</head>
<body>

	<h1>
		Creating jqLite Plugins In AngularJS
	</h1>

	<p>
		<em>Start clicking, bro.</em>
	</p>

	<ul bn-demo>
		<!-- Dynamically populated. -->
	</ul>


	<!-- Load scripts. -->
	<script type="text/javascript" src="../../vendor/angularjs/angular-1.3.6.min.js"></script>
	<script type="text/javascript">

		// Create an application module for our demo.
		var app = angular.module( "Demo", [] );


		// -------------------------------------------------- //
		// -------------------------------------------------- //


		// I add an element to the point of a click and then randomly select one of the
		// existing elements in the list.
		app.directive(
			"bnDemo",
			function() {

				// Return the directive configuration.
				return({
					link: link,
					restrict: "A"
				});


				// ---
				// PUBLIC METHODS.
				// ---


				// I bind the JavaScript events to the local scope.
				function link( scope, element, attributes ) {

					element.on(
						"click",
						function handleClickEvent( event ) {

							// If the user clicked on an existing LI, then don't change 
							// the contents of the container, just select the target.
							if ( angular.element( event.target ).is( "li" ) ) {

								// Select the target element.
								element.children()
									.removeClass( "selected" )
									.filter( event.target )
										.addClass( "selected" )
								;
								
								return;

							}

							// Create a new element at the click position.
							angular.element( "<li></li>" )
								.xyo( event.pageX, event.pageY, -25 )
								.appendTo( element )
							;

							// Select a random element in the list.
							element.children()
								.removeClass( "selected" )
								.random()
									.addClass( "selected" )
							;

						}
					);

				}

			}
		);


		// -------------------------------------------------- //
		// -------------------------------------------------- //


		// Define jqLite plugins. Without jQuery, we can still define custom AngularJS
		// JQLite plugins using the same approach - defining methods on the "prototype"
		// of JQLite. Remember, in jQuery, the ".fn" property is just a convenient 
		// reference to the jQuery.prototype object.
		app.run(
			function createJQLitePlugins() {

				// Get a short-hand reference to the element method.
				var JQLite = angular.element;


				// I safely compare the new nodes by wrapping them in JQLite containers
				// first. This way, they may or may not be raw DOM node references.
				function safeEquals( a, b ) {

					return( JQLite( a )[ 0 ] === JQLite( b )[ 0 ] );

				}


				// I append the current collection to the target element.
				JQLite.prototype.appendTo = function( target ) {

					JQLite( target ).append( this );

					return( this );

				};


				// I filter the current collection using the given operator. Currently 
				// supports DOM reference of function (which must return true).
				JQLite.prototype.filter = function( operator ) {

					// If the operator is not a function, normalize it so that it is
					// a function that returns true if the current element matches the 
					// given target.
					if ( ! angular.isFunction( operator ) ) {

						var target = JQLite( operator );

						operator = function compareNode( node ) {

							return( safeEquals( node, target ) );

						};

					}

					var subset = [];

					angular.forEach(
						this,
						function checkNodeMatch( value ) {

							if ( operator( value ) === true ) {

								subset.push( value );

							}

						}
					);

					// Make sure to wrap the DOM list in a JQLite object.
					return( JQLite( subset ) );

				};


				// I check to see if the first element in the collection matches the given
				// selector. Currently supports DOM element, node name, class syntax.
				// --
				// ex: .is( targetElement )
				// ex: .is( "ul" )
				// ex: .is( ".some-class" )
				JQLite.prototype.is = function( selector ) {

					// If no elements, can't possibly match.
					if ( ! this.length ) {

						return( false );

					}

					// If the value is not a string, assume DOM node.
					if ( ! angular.isString( selector ) ) {

						return( safeEquals( this, selector ) );

					// If starts with "." assume class notation.
					} else if ( selector.charAt( 0 ) === "." ) {

						return( this.hasClass( selector.slice( 1 ) ) );

					// Else, assume node name.
					} else {

						return( this[ 0 ].nodeName === selector.toUpperCase() );

					}

				};


				// I select a random element in the current collection.
				JQLite.prototype.random = function() {

					return( this.eq( Math.floor( this.length * Math.random() ) ) );

				};


				// I position the elements using the given X and Y coordinates. If 
				// provided, the optional offset is applied to the X and Y coordinates
				// of each element.
				JQLite.prototype.xyo = function( x, y, offset ) {

					this.css({
						left: ( ( x + ( offset || 0 ) ) + "px" ),
						top: ( ( y + ( offset || 0 ) ) + "px" )
					});

					return( this );

				};

			}
		);

	</script>

</body>
</html>