<!doctype html>
<html lang="en" ng-app="Demo">
<head>
	<meta charset="utf-8" />

	<title>
		Hacking Scoped CSS Modules Into A Brownfield AngularJS 1.2.22 Application
	</title>

	<link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Permanent+Marker" />
</head>
<body>

	<h1>
		Hacking Scoped CSS Modules Into A Brownfield AngularJS 1.2.22 Application
	</h1>

	<h2>
		Using "compile" Approach
	</h2>

	<bn:name-tag style="margin-right: 30px ;">
		Ben
	</bn:name-tag>

	<bn:name-tag style="background-color: blue ;">
		Kimmie
	</bn:name-tag>


	<!-- Load scripts. -->
	<script type="text/javascript" src="../../../vendor/angularjs/angular-1.2.22.min.js"></script>
	<script type="text/javascript">

		// Create an application module for our demo.
		var app = angular.module( "Demo", [] );

		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //

		// I return a directive compile function that injects the given CSS module name
		// as an attribute on the host element and all of the embedded elements.
		app.value(
			"fakeCssModuleCompiler",
			function fakeCssModuleCompiler( cssModuleName, link ) {

				return( compileDirective );

				function compileDirective( tElement, tAttributes ) {

					// Add the CSS module name to the host element.
					tElement
						.addClass( cssModuleName )
						.attr( cssModuleName, "" )
					;

					// Add the CSS module name to every embedded element.
					angular.forEach(
						tElement.find( "*" ),
						function iterator( tChild ) {

							tChild.setAttribute( cssModuleName, "" );

						}
					);

					// Return optional post-link function.
					return( link || undefined );

				}

			}
		);

		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //

	</script>
	<script type="text/javascript">

		app.directive(
			"bnNameTag",
			function bnNameTagDirective( fakeCssModuleCompiler ) {

				// Return the directive configuration.
				// --
				// Because we don't have native CSS module support, we are compiling the
				// module class name into the directive template and host element at
				// runtime. To keep the class names small and globally unique, I'm just
				// taking the first 6-letters of the hash of the directive element name.
				// --
				// MD5 ("bn:name-tag") = ee8f6b215d4299bac64b16c3d804f7f8
				return({
					compile: fakeCssModuleCompiler( "m-ee8f6b" ),
					restrict: "E",
					scope: {},
					templateUrl: "bn-name-tag.htm",
					transclude: true
				});

			}
		)

	</script>
	<style type="text/less">

		// Set embedded element styles based on the injected attribute. Since we want
		// to tie these classes to this module, we are using the "&" (parent selector)
		// in order to create a compound selector that won't leak outside of this
		// pseudo module.
		[m-ee8f6b] {

			// Set HOST styles.
			// --
			// NOTE: The host element uses both a class AND an attribute. This allows us
			// to use a class-based selector (which is faster than an attribute selector,
			// or so I've read); and, it helps us differentiate the host element from the
			// embedded elements.
			&.m-ee8f6b {
				background-color: #ff0000 ;
				border: 10px solid #ffffff ;
				border-radius: 15px 15px 15px 15px ; 
				box-shadow: 0px 0px 6px rgba( 0, 0, 0, 0.2 ) ;
				box-sizing: border-box ;
				display: inline-block ;
				min-width: 300px ;
			}

			&.wrapper {
				padding: 0px 0px 13px 0px ;
			}

			&.header {
				color: #ffffff ;
				padding: 10px 0px 10px 0px ;
				font-family: helvetica, arial, sans-serif ;
				text-align: center ;
				text-transform: uppercase ;
			}

			&.title {
				display: block ;
				font-size: 38px ;
				font-weight: bold ;
				line-height: 43px ;
				letter-spacing: 4px ;
			}

			&.sub-title {
				display: block ;
				font-size: 18px ;
				line-height: 22px ;
				letter-spacing: 1px ;
			}

			&.name {
				background-color: #ffffff ;
				color: inherit ;
				font-family: "Permanent Marker", sans-serif ;
				font-size: 36px ;
				letter-spacing: 3px ;
				line-height: 41px ;
				padding: 25px 20px 26px 20px ;
				text-align: center ;
			}
		}

	</style>
	<script type="text/ng-template" id="bn-name-tag.htm">

		<div class="wrapper">

			<header class="header">
				<span class="title">
					Hello
				</span>
				<span class="sub-title">
					My name is
				</span>
			</header>

			<div class="name" ng-transclude>
				<!-- Name goes here. -->
			</div>

		</div>

	</script>

	<!-- The browser-based LESS compiler has to be included AFTER the LESS blocks. -->
	<script type="text/javascript" src="../../../vendor/less/3.9.0/less.min.js"></script>

</body>
</html>