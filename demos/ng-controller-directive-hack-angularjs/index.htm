<!doctype html>
<html ng-app="Demo">
<head>
	<meta charset="utf-8" />

	<title>
		Overloading The ng-Controller Directive In AngularJS
	</title>

	<link rel="stylesheet" type="text/css" href="./demo.css"></link>
</head>
<body>

	<h1>
		Overloading The ng-Controller Directive In AngularJS
	</h1>

	<p ng-controller="BoxOneController" class="box box-one">
		X: {{ coordinates.x }}, Y: {{ coordinates.y }}

		<span 
			class="marker" 
			ng-style="{ left: ( coordinates.x + 'px' ), top: ( coordinates.y + 'px' ) }">
		</span>
	</p>

	<p ng-controller="BoxTwoController" class="box box-two">
		X: {{ coordinates.x }}, Y: {{ coordinates.y }}

		<span 
			class="marker" 
			ng-style="{ left: ( coordinates.x + 'px' ), top: ( coordinates.y + 'px' ) }">
		</span>
	</p>

	<p class="warning">
		<strong>Caution:</strong> This is just a fun experiment. Don't actually ever 
		do this in your AngularJS applications.
	</p>


	<!-- Load scripts. -->
	<script type="text/javascript" src="../../vendor/jquery/jquery-2.1.0.min.js"></script>
	<script type="text/javascript" src="../../vendor/angularjs/angular-1.3.15.min.js"></script>
	<script type="text/javascript">

		// Create an application module for our demo.
		var app = angular.module( "Demo", [] );


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I control box one.
		app.controller(
			"BoxOneController",
			function( $scope ) {

				// I define the relative coordinates of the marker.
				$scope.coordinates = {
					x: 0,
					y: 0
				};


				// ---
				// PUBLIC METHODS.
				// ---


				// I update the coordinates.
				$scope.setPosition = function( x, y ) {

					$scope.coordinates.x = Math.floor( x );
					$scope.coordinates.y = Math.floor( y );

				};

			}
		);

	
		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I control box two.
		app.controller(
			"BoxTwoController",
			function( $scope ) {

				// I define the relative coordinates of the marker.
				$scope.coordinates = {
					x: 0,
					y: 0
				};


				// ---
				// PUBLIC METHODS.
				// ---


				// I update the coordinates.
				$scope.setPosition = function( x, y ) {

					// NOTE: Locking coordinates down to 20px increments.
					$scope.coordinates.x = ( Math.floor( x / 20 ) * 20 );
					$scope.coordinates.y = ( Math.floor( y / 20 ) * 20 );

				};

			}
		);

	
		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I provide mouse-interactions for the Box-One controller.
		app.directive(
			"ngController",
			function BoxOneDirectiveFactory() {

				// Return the directive configuration object.
				// --
				// NOTE: Since we are over-loading the ngController directive binding, 
				// we only want to return the LINKING function if the controller type
				// matches our specific use-case (ie, BoxOneController).
				return({
					compile: function( tElement, tAttributes ) {

						return( ( tAttributes.ngController === "BoxOneController" ) && link );

					},
					priority: 0,
					restrict: "A"
				});


				// I bind the JavaScript events to the local scope.
				function link( scope, element, attributes ) {

					// CAUTION: Assuming no change in parent dimensions after linking.
					var parentOffset = element.offset();

					// Translate mouse events into coordinates.
					element.mousemove(
						function handleMousemoveEvent( event ) {

							scope.setPosition(
								Math.max( 0, ( event.pageX - parentOffset.left - 15 ) ),
								Math.max( 0, ( event.pageY - parentOffset.top - 15 ) )
							);

							// NOTE: Using $digest() instead of $apply() due to the vast
							// number of events that will be triggered.
							scope.$digest();

						}
					);

				}

			}
		);


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I provide mouse-interactions for the Box-Two controller.
		app.directive(
			"ngController",
			function BoxTwoDirectiveFactory() {

				// Return the directive configuration object.
				// --
				// NOTE: Since we are over-loading the ngController directive binding, 
				// we only want to return the LINKING function if the controller type
				// matches our specific use-case (ie, BoxTwoController).
				return({
					compile: function( tElement, tAttributes ) {

						return( ( tAttributes.ngController === "BoxTwoController" ) && link );

					},
					priority: 0,
					restrict: "A"
				});


				// I bind the JavaScript events to the local scope.
				function link( scope, element, attributes ) {

					// CAUTION: Assuming no change in parent dimensions after linking.
					var parentOffset = element.offset();
					var parentHeight = element.height();
					var parentWidth = element.width();

					// Translate mouse events into coordinates.
					element.mousemove(
						function handleMousemoveEvent( event ) {

							scope.setPosition(
								( parentWidth - Math.max( 0, ( event.pageX - parentOffset.left - 15 ) ) ),
								( parentHeight - Math.max( 0, ( event.pageY - parentOffset.top - 15 ) ) )
							);

							// NOTE: Using $digest() instead of $apply() due to the vast
							// number of events that will be triggered.
							scope.$digest();

						}
					);

				}

			}
		);

	</script>

</body>
</html>