<!doctype html>
<html ng-app="Demo" ng-controller="AppController">
<head>
	<meta charset="utf-8" />

	<title>
		Defer DOM Tree Binding In AngularJS With Delayed Transclusion
	</title>

	<link rel="stylesheet" type="text/css" href="demo.css"></link>
</head>
<body>

	<h1>
		Defer DOM Tree Binding In AngularJS With Delayed Transclusion
	</h1>

	<ul bn-list class="items">

		<li ng-repeat="friend in friends" class="item">

			<span class="name">{{ friend.name }}</span>

			<a ng-click="showConfirmation( friend )" class="delete">Delete</a>


			<div
				ng-show="friend.isShowingConfirmation"
				class="deleteConfirmation">

				<span class="confirmation">
					<span class="intent">Delete</span>
					<span class="target">{{ friend.name }}</span>
				</span>

				<a ng-click="hideConfirmation( friend )" class="action">Delete</a>
				<a ng-click="hideConfirmation( friend )" class="action">Cancel</a>

			</div>

		</li>

	</ul>

	
	<!-- Load jQuery and AngularJS. -->
	<script type="text/javascript" src="../../vendor/jquery/jquery-2.0.3.min.js"></script>
	<script type="text/javascript" src="../../vendor/angularjs/angular-1.2.min.js"></script>
	<script type="text/javascript">


		// Create an application module for our demo.
		var app = angular.module( "Demo", [] );


		// -------------------------------------------------- //
		// -------------------------------------------------- //


		// Define the root-level controller for the application.
		app.controller(
			"AppController",
			function( $scope ) {

				// Build up a large list of friends.
				$scope.friends = buildFriends( 1000 );


				// ---
				// PUBLIC METHODS.
				// ---


				// I show the delete confirmation for the given friend.
				$scope.showConfirmation = function( friend ) {

					// Convert the name to uppecase so we can see the 
					// change reflected in both the item and the 
					// delete confirmation overlay.
					friend.name = friend.name.toUpperCase();

					friend.isShowingConfirmation = true;

				};


				// I hide the delete confirmation for the given friend.
				$scope.hideConfirmation = function( friend ) {

					friend.isShowingConfirmation = false;

				};


				// ---
				// PRIVATE METHODS.
				// ---


				// I build a collection of friends with the given size.
				function buildFriends( count ) {

					var names = [ "Sarah", "Joanna", "Tricia" ];
					var friends = [];

					for ( var i = 0 ; i < count ; i++ ) {

						friends.push({
							id: i,
							name: names[ i % 3 ],
							isShowingConfirmation: false
						});

					}

					return( friends );

				}


			}
		);


		// -------------------------------------------------- //
		// -------------------------------------------------- //


		// I help the rendering of the DOM tree such that it can 
		// delay the linking of parts of the DOM tree that are not
		// often used.
		app.directive(
			"bnList",
			function( $compile ) {

				// I compile the DOM template.
				function compile( tElement, tAttributes ) {

					// When prepareing the template for the list, we
					// want to extract the "delete confirmation" stuff
					// since it's not going to be used very often.
					var tOverlay = tElement.find( "div.deleteConfirmation" )
						.remove()
					;

					// Now that we've extracted the overlay, we need 
					// to compile it separeately so that it can be 
					// transcluded an linked separately.
					var transcludeOverlay = $compile( tOverlay );


					// I bind the UI to the scope.
					function link( $scope, element, attributes ) {

						// For this demo, we know that the delete 
						// confirmation is triggered when the user
						// goes to click on the delete link. As such,
						// we can inject the delete confirmation overlay
						// when the user "starts" to click.
						element.on(
							"mousedown",
							"li a.delete",
							function( event ) {

								var item = $( this ).closest( "li" );
								var localScope = item.scope();
								
								// Check to see if the item has already
								// been injected. If so, ignore click.
								if ( localScope.hasOwnProperty( "__injected" ) ) {

									return;

								}

								// Transclude and link the DOM tree for
								// the delete confirmation.
								transcludeOverlay(
									localScope,
									function( overlayClone, $scope ) {

										item.append( overlayClone );

										$scope.__injected = true;

									}
								);

								// Trigger a $digest so all the watchers
								// within the injected DOM tree know to
								// initialize their bindings.
								localScope.$apply();

							}
						);

					}

					return( link );

				}


				// Return the directive configuration.
				return({
					compile: compile
				});

			}
		);
		

	</script>

</body>
</html>