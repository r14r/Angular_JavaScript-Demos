
<!-- Define the recursive template. -->
<ng-template #nodeTemplateRef let-node>

	<div class="node" [class.node--selected]="( node === selectedTreeNode )">

		<a (click)="selectNode( node )" class="node__label">
			{{ node.label }}
		</a>

		<div *ngIf="node.children.length" class="node__children">

			<!-- Invoke the recursive template. -->
			<ng-template
				ngFor
				[ngForOf]="node.children"
				[ngForTemplate]="nodeTemplateRef">
				<!--
					NOTE: The "$implicit" property of the ngFor context is what will
					be made available to the template ref's implicit let-node binding.
				-->
			</ng-template>

		</div>

	</div>

</ng-template>

<!--
	Initiate the recursive template rendering. Because our recursive template is going to
	be using the ngFor directive to render recursively, the "context" in the recursive
	instances is going to be the ngForContext. As such, we have to "mock" the initial
	context to look like the context that the ngFor directive will expose internally.

	NOTE: If we used ngContainer or ngTemplate to invoke the recursion internally, we'd
	have more control over which values were made available at each level.
-->
<ng-template
	[ngTemplateOutlet]="nodeTemplateRef"
	[ngTemplateOutletContext]="{ $implicit: data.root }">
</ng-template>

<p class="note">
	<em>Ng-For Template Rendering</em>
</p>
