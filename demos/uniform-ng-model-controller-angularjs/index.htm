<!doctype html>
<html ng-app="Demo">
<head>
	<meta charset="utf-8" />

	<title>
		Consuming The Uniform jQuery Plugin In AngularJS
	</title>

	<link rel="stylesheet" type="text/css" href="./demo.css"></link>
	<link rel="stylesheet" type="text/css" href="../../vendor/uniform/theme/css/uniform.default.css"></link>
</head>
<body ng-controller="AppController as vm">

	<h1>
		Consuming The Uniform jQuery Plugin In AngularJS
	</h1>

	<p>
		<a ng-click="vm.toggleForm()">Toggle the form</a>.
	</p>

	<!-- We are going to toggle to form to showcase DOM element creation and linking. -->
	<form ng-if="vm.isShowingForm">

		<p>
			Who is the most bad-ass actress:
		</p>

		<ul>
			<li ng-repeat="actor in vm.actors track by actor.id">

				<!--
					Each Input will have the Uniform directive, which will take care of
					synchronizing the state of the input to the Uniform instance. 
				-->
				<label>
					<input 
						type="radio" 
						ng-model="vm.mostBadass" 
						ng-value="actor"
						bn-uniform 
					/> 
					{{ actor.name }}
				</label>

			</li>
		</ul>

		<p>
			<!-- This is just an alternate input element for the same selection. -->
			<select 
				ng-model="vm.mostBadass"
				ng-options="actor.name for actor in vm.actors track by actor.id"
				bn-uniform>

				<option value="">None selected</option>

			</select>
		</p>

		<p>
			<a ng-click="vm.selectLastActor()">Select last actor</a>
			&mdash;
			<a ng-click="vm.selectNone()">Select no actor</a>.
		</p>

		<!-- 
			This forces the page to have vertical scrolling. This is here to show that
			our Uniform plugin won't force a repaint before the DOM has been structured 
			properly. 
		-->
		<p ng-if="vm.isShowingForm" class="spacer">
			<br />
		</p>

	</form>

	<!-- More forced vertical scrolling. -->
	<p ng-if="! vm.isShowingForm" class="spacer">
		<br />
	</p>

		
	<!-- Load scripts. -->
	<script type="text/javascript" src="../../vendor/jquery/jquery-2.1.0.min.js"></script>
	<script type="text/javascript" src="../../vendor/uniform/jquery.uniform-2.1.2.js"></script>
	<script type="text/javascript" src="../../vendor/angularjs/angular-1.3.16.js"></script>
	<script type="text/javascript">

		// Create an application module for our demo.
		angular.module( "Demo", [] );


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I control the root for the application.
		angular.module( "Demo" ).controller(
			"AppController",
			function( $scope ) {

				var vm = this;

				// I am the badass actresses to list.
				vm.actors = [
					{
						id: 1,
						name: "Angela Bassett"
					},
					{
						id: 2,
						name: "Linda Hamilton"
					},
					{
						id: 3,
						name: "Michelle Yeoh"
					},
					{
						id: 4,
						name: "Gina Carano"
					}
				];

				// I hold the currently-selected badass.
				vm.mostBadass = null

				// I determine if the form is currently being show.
				vm.isShowingForm = true;

				// I watch for changes in the actress selection.
				$scope.$watch( "vm.mostBadass", handleBadassChange );

				// Expose the public API.
				vm.selectLastActor = selectLastActor;
				vm.selectNone = selectNone;
				vm.toggleForm = toggleForm;


				// ---
				// PUBLIC METHODS.
				// ---


				// I select the last actress in the list.
				function selectLastActor() {

					vm.mostBadass = vm.actors[ vm.actors.length - 1 ];

				}


				// I deselect the most badass actress.
				function selectNone() {

					vm.mostBadass = null;

				}


				// I toggle the visibility of the form.
				function toggleForm() {

					vm.isShowingForm = ! vm.isShowingForm;

				}


				// ---
				// PRIVATE METHODS.
				// ---


				// I log the selected value upon change.
				function handleBadassChange( newValue ) {

					if ( newValue ) {

						console.log( "Changed to %s.", newValue.name );

					} else {

						console.log( "Changed to no selection." );

					}

				}

			}
		);


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I bind the Uniform jQuery plugin to the current Form element. This depends
		// on the existence of the ngModel directive.
		angular.module( "Demo" ).directive(
			"bnUniform",
			function() {

				// Return the directive configuration object.
				return({
					link: link,
					restrict: "A"
				});


				// I bind the JavaScript events to the view-model.
				function link( scope, element, attributes ) {

					// Because we are deferring the application of the Uniform plugin, 
					// this will help us keep track of whether or not the plugin has been
					// applied.
					var uniformedElement = null;

					// We don't want to link-up the Uniform plugin right away as it will
					// query the DOM (Document Object Model) layout which will cause the 
					// browser to repaint which will, in turn, lead to unexpected and poor 
					// behaviors like forcing a scroll of the page. Since we have to watch
					// for ngModel value changes anyway, we'll defer our Uniform plugin
					// instantiation until after the first $watch() has fired.
					scope.$watch( attributes.ngModel, handleModelChange );

					// When the scope is destroyed, we have to teardown our jQuery plugin
					// to in order to make sure that it releases memory.
					scope.$on( "$destroy", handleDestroy );


					// ---
					// PRIVATE METHODS.
					// ---


					// I clean up the directive when the scope is destroyed.
					function handleDestroy() {

						// If the Uniform plugin has not yet been applied, there's nothing
						// that we have to explicitly teardown.
						if ( ! uniformedElement ) {

							return;

						}

						uniformedElement.uniform.restore( uniformedElement );
						
					}


					// I handle changes in the ngModel value, translating it into an 
					// update to the Uniform plugin.
					function handleModelChange( newValue, oldValue ) {
						
						// If we try to call render right away, two things will go wrong:
						// first, we won't give the ngValue directive time to pipe the 
						// correct value into ngModle; and second, it will force an 
						// undesirable repaint of the browser. As such, we'll perform the
						// Uniform synchronization at a later point in the $digest.
						scope.$evalAsync( synchronizeUniform );
						
					}


					// I synchronize Uniform with the underlying form element.
					function synchronizeUniform() {

						// Since we are executing this at a later point in the $digest
						// life-cycle, we need to ensure that the scope hasn't been 
						// destroyed in the interim period. While this is unlikely (if 
						// not impossible - I haven't poured over the details of the $digest
						// in this context) it's still a good idea as it embraces the 
						// nature of the asynchronous control flow.
						// --
						// NOTE: During the $destroy event, scope is detached from the 
						// scope tree and the parent scope is nullified. This is why we
						// are checking for the absence of a parent scope to indicate 
						// destruction of the directive.
						if ( ! scope.$parent ) {

							return;

						}

						// If Uniform has not yet been integrated, apply it to the element.
						if ( ! uniformedElement ) {

							return( uniformedElement = element.uniform() );

						}

						// Otherwise, update the existing instance.
						uniformedElement.uniform.update( uniformedElement );	

					}

				}

			}
		);

	</script>

</body>
</html>