<!doctype html>
<html ng-app="Demo">
<head>
	<meta charset="utf-8" />

	<title>
		When Do You Need To Compile A Directive In AngularJS
	</title>

	<link rel="stylesheet" type="text/css" href="./demo.css"></link>
</head>
<body>

	<h1>
		When Do You Need To Compile A Directive In AngularJS
	</h1>

	<!-- 
		In this component directive, we are going to both COMPILE the transcluded 
		content and LINK it. 
	-->
	<div bn-menu>
		<ul>
			<li>
				Heather <em>(static)</em>
			</li>
			<li>
				Kim <em>(static)</em>
			</li>
			<li ng-repeat="friend in [ 'Joanna', 'Sarah' ]">
				{{ friend }} <em>(ng-repeat)</em>
			</li>
		</ul>
	</div>

	<!--
		In this component directive, we are going to try and do everything that we
		need to do in the LINK function only. 
	-->
	<div bn-menu-fail>
		<ul>
			<li>
				Heather <em>(static)</em>
			</li>
			<li>
				Kim <em>(static)</em>
			</li>
			<li ng-repeat="friend in [ 'Joanna', 'Sarah' ]">
				{{ friend }} <em>(ng-repeat)</em>
			</li>
		</ul>
	</div>


	<!-- This is the template that we are going to use for our module directive. -->
	<script type="text/ng-template" id="module.htm">

		<div class="menu-root">
			<div class="root-option-label option-label">
				( Menu Root - Dynamic )
			</div>
		</div>

		<!-- Original content to be transcluded here. -->
		
	</script>


	<!-- Load scripts. -->
	<script type="text/javascript" src="../../vendor/angularjs/angular-1.3.13.min.js"></script>
	<script type="text/javascript">

		// Create an application module for our demo.
		var app = angular.module( "Demo", [] );


		// -------------------------------------------------- //
		// -------------------------------------------------- //


		// When a directive uses a TEMPLATE, the compile function will accept the 
		// content of that template. But, in this case, what we actually want to do 
		// is compile the transcluded content (pre-transclusion). As such, we need to
		// define this directive at two priorities, with this one executing before the
		// transclude one.
		app.directive(
			"bnMenu",
			function() {

				// Return the directive configuration. Note that we are executing at
				// priority 1 so that we execute before the transclude version.
				return({
					compile: compile,
					priority: 1
				});


				// I compile the directive element prior to trnasclusion. I add the 
				// necessary classes to the transcluded content for the CSS hooks and
				// (not shown in this demo) the JavaScript event hooks (that will use
				// event delegation based on event-target / CSS class).
				function compile( tElement, tAttibutes ) {

					tElement.addClass( "m-menu" );

					var optionsList = tElement
						.children( "ul" )
							.addClass( "menu-options" )
					;

					var options = optionsList
						.children( "li" )
							.addClass( "menu-option option-label" )
					;

				}

			}
		);


		// Since this directive uses a TEMPLATE (url), any attempt to call the compile() 
		// method will only give us access to the template content, not the transcluded
		// content. As such, this priority will only take care of transcluding the 
		// content into the template.
		app.directive(
			"bnMenu",
			function() {

				// Return the directive configuration. 
				// --
				// NOTE: Priority defaults to 0. I'm including it here for explicitness.
				return({
					link: link,
					priority: 0,
					templateUrl: "module.htm",
					transclude: true
				});


				// I bind the JavaScript events to the local scope.
				function link( scope, element, attributes, _controller, transclude ) {
				
					// Link and transclude the user-defined content into our component.
					transclude(
						function( userContent ) {

							element.append( userContent );

						}
					);
				
				}

			}
		);


		// -------------------------------------------------- //
		// -------------------------------------------------- //


		// In this version of the menu component, we're going to forego the COMPILE step
		// and try to do everything in the LINK function.
		app.directive(
			"bnMenuFail",
			function() {

				// Return the directive configuration.
				return({
					link: link,
					templateUrl: "module.htm",
					transclude: true
				});


				// I bind the JavaScript events to the local scope.
				function link( scope, element, attributes, _controller, transclude ) {
				
					element.addClass( "m-menu" );

					// Link and transclude the user-defined content into our component.
					transclude(
						function( userContent ) {

							var optionsList = userContent
								.eq( 1 )
									.addClass( "menu-options" )
							;

							var options = optionsList
								.children( "li" )
									.addClass( "menu-option option-label" )
							;
							
							element.append( userContent );

						}
					);
				
				}

			}
		);

	</script>

</body>
</html>