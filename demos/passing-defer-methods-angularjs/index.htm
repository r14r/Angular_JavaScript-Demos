<!doctype html>
<html ng-app="Demo">
<head>
	<meta charset="utf-8" />

	<title>
		Passing $q Defer Methods Around In AngularJS
	</title>
</head>
<body ng-controller="AppController">

	<h1>
		Passing $q Defer Methods Around In AngularJS
	</h1>

	<p>
		<em>Logging execution times in the console.</em>
	</p>


	<!-- Load scripts. -->
	<script type="text/javascript" src="../../vendor/angularjs/angular-1.3.6.min.js"></script>
	<script type="text/javascript">

		// Create an application module for our demo.
		var app = angular.module( "Demo", [] );


		// -------------------------------------------------- //
		// -------------------------------------------------- //


		// I control the root of the application.
		app.controller(
			"AppController",
			function( $scope, $q, $timeout ) {

				var deferred = $q.defer();

				// Bind the resolution and update of the deferred value.
				deferred.promise.then(
					function handleResolve() {

						console.log( "Deferred resolved at", time() );

					},
					null,
					function handleNotify() {

						console.log( "Deferred notified at", time() );

					}
				);

				console.log( "Starting time at", time() );

				// Copy the resolve and notify method references. We can pass these 
				// naked functions around with an object-scoping and they will still 
				// work because the deferred instance methods are all implicitly bound 
				// to the deferred object.
				// --
				// NOTE: .notify() wasn't available on the $q library until AngularJS 1.2.
				var resolve = deferred.resolve;
				var reject = deferred.reject;
				var notify = deferred.notify;

				// Pass the naked methods into the timeout service so we can see them
				// execute properly without scoping.
				$timeout( notify, 1000 );
				$timeout( notify, 2000 );
				$timeout( notify, 3000 );
				$timeout( resolve, 4000 );


				// ---
				// PRIVATE METHODS.
				// ---


				// I return the current time string.
				function time() {

					return( ( new Date() ).toTimeString() );

				}
				
			}
		);

	</script>

</body>
</html>
