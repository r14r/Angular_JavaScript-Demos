<!doctype html>
<html>
<head>
	<meta charset="utf-8" />

	<title>
		Experimenting With Input Cursor Positions In Angular 2 Beta 3
	</title>

	<link rel="stylesheet" type="text/css" href="./demo.css"></link>
</head>
<body>

	<h1>
		Experimenting With Input Cursor Positions In Angular 2 Beta 3
	</h1>

	<my-app>
		Loading...
	</my-app>

	<!-- Load demo scripts. -->
	<script type="text/javascript" src="../../vendor/angularjs-2-beta/3/es6-shim.min.js"></script>
	<script type="text/javascript" src="../../vendor/angularjs-2-beta/3/Rx.umd.min.js"></script>
	<script type="text/javascript" src="../../vendor/angularjs-2-beta/3/angular2-polyfills.min.js"></script>
	<!-- CAUTION: This demo does not work with the minified UMD code. -->
	<script type="text/javascript" src="../../vendor/angularjs-2-beta/3/angular2-all.umd.js"></script>
	<!-- AlmondJS - minimal implementation of RequireJS. -->
	<script type="text/javascript" src="../../vendor/angularjs-2-beta/3/almond.js"></script>
	<script type="text/javascript">

		// Defer bootstrapping until all of the components have been declared.
		// --
		// NOTE: Not all components have to be required here since they will be 
		// implicitly required by other components.
		requirejs(
			[ "AppComponent" ],
			function run( AppComponent ) {

				ng.core.enableProdMode();

				ng.platform.browser.bootstrap( AppComponent );

			}
		);


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I provide the root App component.
		define(
			"AppComponent",
			function registerAppComponent() {

				var MaintainInputCursor = require( "MaintainInputCursor" );

				// Configure the App component definition.
				ng.core
					.Component({
						selector: "my-app",

						// Comment this line out to see the default behavior of Inputs
						// that use uni-directional data flow.
						// --
						directives: [ MaintainInputCursor ],

						// Notice that we have two different inputs - one that uses
						// ngModel for the two-way data-binding sugar on top of the 
						// one-way data flow; and, one that uses explicit bindings 
						// to manage the flow of data into and out of the input.
						template:
						`
							<p>
								<input 
									type="text" 
									[(ngModel)]="form.name" 
									placeholder="Name..."
								/>

								&mdash;&gt; {{ form.name }}
							</p>
							
							<p>
								<input 
									#nickname 
									type="text" 
									[value]="form.nickname" 
									(input)="applyNickname( nickname.value )" 
									placeholder="Nickname..." 
								/>
								
								&mdash;&gt; {{ form.nickname }}
							</p>

							<p>
								<a (click)="form.nickname = 'Bro-dog'">Set nickname</a>.
							</p>
						`
					})
					.Class({
						constructor: AppController
					})
				;

				return( AppController );


				// I control the App component.
				function AppController() {

					var vm = this;

					// I hold the form data for use with ngModel.
					vm.form = {
						name: "",
						nickname: ""
					};

					// Expose the public API.
					vm.applyNickname = applyNickname;
					

					// ---
					// PUBLIC METHODS.
					// ---


					// I receive the input-change events and apply them back to the view-
					// model, trying to maintain explicit uni-directional data flow.
					function applyNickname( newValue ) {
						
						vm.form.nickname = newValue;

						// If you discard the value emitted from the Input, you will 
						// find out that the input acts somewhat like a "Controlled 
						// Component" and somewhat like an "Uncontrolled Component" 
						// (in ReactJS terminology).
						// --
						// vm.form.nickname = "Discarded...";

					}

				}

			}
		);


		// --------------------------------------------------------------------------- //
		// --------------------------------------------------------------------------- //


		// I get Angular to maintain the cursor position for inputs that are using 
		// uni-directional data-flow. 
		// --
		// MY THEORY: By applying an input directive that exposes a [value] binding, 
		// we are breaking the connection between the view-model and the native DOM
		// element. Meaning, changes the [value] are now piped into the directive rather
		// than into the underlying Input DOM element. This allows the directive to act
		// as a proxy to the Input DOM element, applying value-changes only when the 
		// value originates externally to the View.
		define(
			"MaintainInputCursor",
			function registerMaintainInputCursor() {

				// Configure the MaintainInputCursor directive.
				ng.core
					.Directive({
						selector: "input[value]:not([ngModel])",

						// CAUTION: Here, we are co-opting the use of the native "value"
						// property, which gives the directive control over how this
						// binding gets propagated down to the actual DOM rendering.
						inputs: [ "value" ],

						host: {
							"(input)": "trackValue( $event.target.value )"
						}
					})
					.Class({
						constructor: MaintainInputCursorController,

						// Define life-cycle events on the prototype so that they'll be
						// picked up at runtime.
						ngOnChanges: function noop() {}
					})
				;

				MaintainInputCursorController.parameters = [ 
					new ng.core.Inject( ng.core.Renderer ),
					new ng.core.Inject( ng.core.ElementRef )
				];

				return( MaintainInputCursorController );


				// I control the MaintainInputCursor directive.
				function MaintainInputCursorController( renderer, elementRef ) {

					var vm = this;

					// I hold the currently rendered value of the input.
					var renderedValue = null;

					// Expose the public methods.
					vm.ngOnChanges = ngOnChanges;
					vm.trackValue = trackValue;


					// ---
					// PUBLIC METHODS.
					// ---


					// I listen for changed on the input and update the input to reflect
					// the inputs as necessary (to maintain that one-way data flow).
					function ngOnChanges( event ) {

						var incomingValue = event.value.currentValue;

						// If the incoming value is not currently reflected in the state
						// of the input element, push the input value to the DOM.
						if ( incomingValue !== renderedValue ) {

							renderer.setElementProperty( elementRef.nativeElement, "value", incomingValue );

							renderedValue = incomingValue;

						}

					}


					// I track the rendered value of the input as the user interacts 
					// with the DOM node.
					function trackValue( newValue ) {

						renderedValue = newValue;

					}				

				}

			}
		);

	</script>

</body>
</html>